Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

Solve:
class Solution {
public:
    int minimumTotal(vector<vector<int> > &triangle) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        // dp[flag][j] = min(dp[flag^1][j + 1], dp[flag^1][j]) + triangle[i][j]
        int flag = 0;
        int n = triangle.size();
        int** dp = new int*[2];
        dp[0] = new int[n + 1];
        dp[1] = new int[n + 1];
        for(int i = 0; i < n; ++ i) {
            dp[flag][i] = triangle[n - 1][i];
        }
        if(n == 1) {
            return triangle[0][0];
        }
        for(int i = n - 2; i >= 0; -- i) {
            for(int j = 0; j <= i; ++ j) {
                dp[flag^1][j] = min(dp[flag][j + 1], dp[flag][j]) + triangle[i][j];
            }
            flag ^= 1;
        }
        return dp[flag][0];
    }
};
